// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

var simplePaginationKey = "github.com/woocoos/entco/pkg/ent.SimplePaginzation"

type SimplePagination struct {
	CurrentIndex int
	PageIndex    int
}

// NewSimplePagination creates a new SimplePagination from the given page and count. If both are empty, it returns nil.
func NewSimplePagination(p, c string) (*SimplePagination, error) {
	if p == "" && c == "" {
		return nil, nil
	}
	sp := &SimplePagination{}
	if p != "" {
		i, err := strconv.Atoi(p)
		if err != nil {
			return nil, err
		}
		sp.PageIndex = i
	}
	if c != "" {
		i, err := strconv.Atoi(c)
		if err != nil {
			return nil, err
		}
		sp.CurrentIndex = i
	}
	return sp, nil
}

func (u *UserQuery) SimplePaginate(
	ctx context.Context, sp *SimplePagination, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = u.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	if u, err = pager.applyCursors(u, after, before); err != nil {
		return nil, err
	}
	u = pager.applyOrder(u)
	if limit := paginateLimit(first, last); limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	if sp != nil {
		if first != nil {
			u.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			u.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}
